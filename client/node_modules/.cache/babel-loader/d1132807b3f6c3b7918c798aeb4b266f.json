{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../transactions/AddSongTransaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSongTransaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    index: -1\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload,\n            index: -1\n          });\n        }\n      //DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // UPDATE A LIST: list of playlists -> individual playlist\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null,\n            index: -1\n          });\n        }\n      // case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n      //     return setStore({\n      //         idNamePairs: store.idNamePairs,\n      //         currentList: store.currentList,\n      //         newListCounter: store.newListCounter,\n      //         listNameActive: false,\n      //         listMarkedForDeletion: null,\n      //         index: payload\n      //     });\n      // }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION CREATES A NEW LIST \n\n\n  store.createNewList = function (payload) {\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(payload);\n      let playlist = response.data.playlist;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: playlist\n      });\n      store.history.push(\"/playlist/\" + playlist._id);\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n\n  store.deleteList = function (id) {\n    async function asyncRemoveCurrentList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n\n    asyncRemoveCurrentList(id);\n  }; //delete the list since the confirm button is pressed\n\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showDeleteSongModal = function (index) {\n    store.index = index;\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.updatePlaylist = function () {\n    async function asyncUpdateList() {\n      const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateList();\n  };\n\n  store.addSong = function () {\n    let list = store.currentList;\n    let song = {\n      title: \"Untitled\",\n      artist: \"Unknown\",\n      youtTubeId: \"dQw4w9WgXcQ\"\n    };\n    list.songs.push(song);\n    store.updatePlaylist();\n  };\n\n  store.addAddSongTransaction = function () {\n    let transaction = new AddSong_Transaction(this);\n    tps.addTransaction(transaction);\n  }; // store.noteSongDelete = (index) => {\n  //     storeReducer({\n  //         type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n  //         payload: index\n  //     });\n  // }\n\n\n  store.deleteSong = function (index) {\n    let list = store.currentList.songs;\n    list.splice(index, 1);\n    store.updatePlaylist();\n    store.hideDeleteSongModal();\n  };\n\n  store.addDeleteSongTransaction = function (index) {\n    console.log(index);\n    let song = store.currentList.songs[index];\n    let title = song.title;\n    let artist = song.artist;\n    let id = song.youTubeId;\n    let transaction = new DeleteSong_Transaction(this, store.index, title, artist, id);\n    tps.addTransaction(transaction);\n  };\n\n  store.drapAndDropSong = (first, last) => {\n    let playlist = store.currentList;\n\n    if (first > last) {\n      let arr = playlist.songs[first];\n\n      for (let i = first; i > last; i--) {\n        playlist.songs[i] = playlist.songs[i - 1];\n      }\n\n      playlist.songs[last] = arr;\n    } else if (first < last) {}\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setListNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"Z2u3fz8eiS1fhWuuWTWrXvobGCs=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","AddSong_Transaction","DeleteSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","index","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","DELETE_MARKED_LIST","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","createNewList","asyncCreateNewList","createPlaylist","history","push","markListForDeletion","showDeleteListModal","deleteList","asyncRemoveCurrentList","deletePlaylistById","loadIdNamePairs","newIdNamePairs","filter","idNamePair","deleteMarkedList","hideDeleteListModal","closeCurrentList","modal","document","getElementById","classList","add","remove","showDeleteSongModal","hideDeleteSongModal","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","getPlaylistSize","songs","length","updatePlaylist","asyncUpdateList","addSong","list","song","title","artist","youtTubeId","addAddSongTransaction","transaction","addTransaction","deleteSong","splice","addDeleteSongTransaction","youTubeId","drapAndDropSong","first","last","arr","i","undo","undoTransaction","redo","doTransaction","setListNameActive"],"sources":["/Users/victordai/Desktop/CSE 316 HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport AddSong_Transaction from '../transactions/AddSongTransaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSongTransaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null,\n        index: -1\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload,\n                    index: -1\n                });\n            }\n\n            //DELETE A LIST\n            case GlobalStoreActionType.DELETE_MARKED_LIST: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n\n            // UPDATE A LIST: list of playlists -> individual playlist\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listMarkedForDeletion: null,\n                    index: -1\n                });\n            }\n\n            // case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n            //     return setStore({\n            //         idNamePairs: store.idNamePairs,\n            //         currentList: store.currentList,\n            //         newListCounter: store.newListCounter,\n            //         listNameActive: false,\n            //         listMarkedForDeletion: null,\n            //         index: payload\n            //     });\n            // }\n\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST \n    store.createNewList = function (payload) { \n\n        async function asyncCreateNewList() {\n            let response = await api.createPlaylist(payload);\n            let playlist = response.data.playlist;\n            \n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n            });\n\n            store.history.push(\"/playlist/\" + playlist._id);\n        }\n        asyncCreateNewList();\n        \n    }\n\n    store.markListForDeletion = function(id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        store.showDeleteListModal();\n    }\n\n    store.deleteList = function(id) {\n        async function asyncRemoveCurrentList(id) {\n            let response = await api.deletePlaylistById(id);\n            if(response.data.success) {\n                store.loadIdNamePairs();\n                const newIdNamePairs = store.idNamePairs.filter((idNamePair) => idNamePair !== id);\n                storeReducer({\n                    type: GlobalStoreActionType.DELETE_MARKED_LIST,\n                    payload: newIdNamePairs\n                });\n            }\n        }\n        asyncRemoveCurrentList(id);\n    }\n    //delete the list since the confirm button is pressed\n    store.deleteMarkedList = function() {\n        store.deleteList(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.showDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal = function(index) {\n        store.index = index;\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSongModal = function() {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n\n    store.updatePlaylist = function() {\n        async function asyncUpdateList() {\n            const response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if(response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateList();\n    }\n\n    store.addSong = function() {\n        let list = store.currentList;\n        let song = {\n            title: \"Untitled\",\n            artist: \"Unknown\",\n            youtTubeId: \"dQw4w9WgXcQ\"\n        }\n        list.songs.push(song);\n        store.updatePlaylist();\n    }\n\n    store.addAddSongTransaction = function() {\n        let transaction = new AddSong_Transaction(this);\n        tps.addTransaction(transaction);\n    }\n\n    // store.noteSongDelete = (index) => {\n    //     storeReducer({\n    //         type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n    //         payload: index\n    //     });\n    // }\n\n    store.deleteSong = function(index) {\n        let list = store.currentList.songs;\n        list.splice(index, 1);\n        store.updatePlaylist();\n        store.hideDeleteSongModal();\n    }\n\n    store.addDeleteSongTransaction = function(index) {\n        console.log(index);\n        let song = store.currentList.songs[index];\n        let title = song.title;\n        let artist = song.artist;\n        let id = song.youTubeId;\n        let transaction = new DeleteSong_Transaction(this, store.index, title, artist, id);\n        tps.addTransaction(transaction);\n    }\n\n    store.drapAndDropSong = (first,last) => {\n        let playlist = store.currentList;\n        if(first > last) {\n            let arr = playlist.songs[first];\n            for(let i = first; i > last; i--) {\n                playlist.songs[i] = playlist.songs[i - 1];\n            }\n            playlist.songs[last] = arr;\n        }\n        else if(first < last) {\n            \n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setListNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}